<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[using git svn together]]></title>
      <url>http://catwarrior.github.io/2016/04/06/using-git-svn-together/</url>
      <content type="html"><![CDATA[<p><a href="https://git-scm.com/book/zh/v1/Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F-Git-%E4%B8%8E-Subversion" target="_blank" rel="external">offical document</a></p>
<h3 id="clone">clone</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git svn <span class="built_in">clone</span>  https://<span class="number">10.100</span>.xx.xx/svn/xxx/ -T trunk -b branches -t tags</span><br></pre></td></tr></table></figure>
<p>-T trunk -b branches -t tags 告诉 Git 该 Subversion 仓库遵循了基本的分支和标签命名法则。如果你的主干(译注：trunk，相当于非分布式版本控制里的master分支，代表开发的主线），分支或者标签以不同的方式命名，则应做出相应改变。由于该法则的常见性，可以使用 -s 来代替整条命令，它意味着标准布局（s 是 Standard layout 的首字母），也就是前面选项的内容。下面的命令有相同的效果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git svn <span class="built_in">clone</span> file:///tmp/<span class="built_in">test</span>-svn <span class="operator">-s</span></span><br></pre></td></tr></table></figure></p>
<p>only clone from last serveral revsion<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn <span class="built_in">clone</span> -r486:HEAD https://<span class="number">10.100</span>.xx.xx/svn/xxx/</span><br></pre></td></tr></table></figure></p>
<h3 id="commit">commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">'Adding git-svn instructions to the README'</span></span><br></pre></td></tr></table></figure>
<h3 id="rebase">rebase</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn rebase</span><br></pre></td></tr></table></figure>
<h3 id="push">push</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git svn dcommit</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://catwarrior.github.io/2016/04/06/side-by-side/</url>
      <content type="html"><![CDATA[<h1 id="Azure">Azure</h1><h2 id="Azure_website_whitelist">Azure website whitelist</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">system.webServer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">security</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ipSecurity</span> <span class="attribute">allowUnlisted</span>=<span class="value">"false"</span> <span class="attribute">denyAction</span>=<span class="value">"NotFound"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">add</span> <span class="attribute">allowed</span>=<span class="value">"true"</span> <span class="attribute">ipAddress</span>=<span class="value">"60.247.xx.xx"</span> <span class="attribute">subnetMask</span>=<span class="value">"255.0.0.0"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ipSecurity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">security</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Azure_web_job-">Azure web job.</h2><p> SDK: <code>Microsoft.Azure.WebJobs</code> <code>Microsoft.Azure.WebJobs.Extensions</code></p>
<h3 id="Sample:">Sample:</h3><p>entry point<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> config = <span class="keyword">new</span> JobHostConfiguration();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (config.IsDevelopment)</span><br><span class="line">            &#123;</span><br><span class="line">                config.UseDevelopmentSettings();</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            config.UseTimers(); <span class="comment">// timer trigger which is defined in SDK extensions.</span></span><br><span class="line"></span><br><span class="line">            JobHost host = <span class="keyword">new</span> JobHost(config);</span><br><span class="line">            host.RunAndBlock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>QueueTrigger<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BindToQueueXXXXXX</span>(<span class="params">[QueueTrigger(<span class="string">"xxxx"</span></span>)] XObject obj, TextWriter log)</span><br><span class="line">     </span>&#123;</span><br><span class="line">        <span class="comment">// do stuff here</span></span><br><span class="line">         log.Write(<span class="string">"balabala "</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p>
<p>QueueTrigger<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BindToBlobsXXXXX</span>(<span class="params">[BlobTrigger(<span class="string">"xxxx"</span></span>)] XObject obj, TextWriter log)</span><br><span class="line">     </span>&#123;</span><br><span class="line">        <span class="comment">// do stuff here</span></span><br><span class="line">         log.Write(<span class="string">"balabala "</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Redis_cache">Redis cache</h2><p>For better performance<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ConnectionMultiplexer connection;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ConnectionMultiplexer Connection </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(connection == <span class="keyword">null</span> || !connection.IsConnected)</span><br><span class="line">        &#123;</span><br><span class="line">            connection = ConnectionMultiplexer.Connect(<span class="string">"yhdcache0.redis.cache.windows.net,ssl=true,password=..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="DSL_in_C#_Try/NoException">DSL in C# Try/NoException</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Action,Action&gt; NoException = (action) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Action wapper = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            action.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line"> </span><br><span class="line">            Console.WriteLine(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> wapper;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="Docker">Docker</h1><h2 id="play_with_boot2docker">play with boot2docker</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">boot2docker <span class="keyword">delete</span></span><br><span class="line">boot2docker init</span><br><span class="line"></span><br><span class="line">boot2docker start</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br><span class="line">`<span class="javascript"></span>``<span class="javascript"> bash</span><br><span class="line"></span><br><span class="line">[a good place show how to use docker <span class="keyword">in</span> everyday life]https:<span class="comment">//hub.docker.com/r/tutum/lamp/</span></span><br><span class="line">[create dev environment <span class="keyword">with</span> docker file]http:<span class="comment">//www.open-open.com/lib/view/open1422533340611.html</span></span><br><span class="line">###  查看docker信息（version、info）</span><br><span class="line"></span>``<span class="javascript"></span>` bash</span><br><span class="line"><span class="comment"># 查看docker版本  </span></span><br><span class="line">$docker version  </span><br><span class="line"><span class="comment"># 显示docker系统的信息  </span></span><br><span class="line">$docker info</span><br></pre></td></tr></table></figure>
<h3 id="对image的操作（search、pull、images、rmi、history）">对image的操作（search、pull、images、rmi、history）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检索image  </span></span><br><span class="line"><span class="variable">$docker</span> search image_name  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 下载image  </span></span><br><span class="line"><span class="variable">$docker</span> pull image_name  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don't truncate output; -q, --quiet=false Only show numeric IDs  </span></span><br><span class="line"><span class="variable">$docker</span> images  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents  </span></span><br><span class="line"><span class="variable">$docker</span> rmi image_name  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示一个镜像的历史; --no-trunc=false Don't truncate output; -q, --quiet=false Only show numeric IDs  </span></span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">history</span> image_name</span><br></pre></td></tr></table></figure>
<h3 id="启动容器（run）">启动容器（run）</h3><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在容器中运行"echo"命令，输出"hello word"  </span></span><br><span class="line"><span class="variable">$docker</span> run image_name <span class="built_in">echo</span> <span class="string">"hello word"</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 交互式进入容器中  </span></span><br><span class="line"><span class="variable">$docker</span> run -i -t image_name /bin/bash  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在容器中安装新的程序  </span></span><br><span class="line"><span class="variable">$docker</span> run image_name apt-get install -y app_name</span><br></pre></td></tr></table></figure>
<p>Note：  在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。</p>
<h3 id="查看容器（ps）">查看容器（ps）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前所有正在运行的container  </span></span><br><span class="line"><span class="variable">$docker</span> ps  </span><br><span class="line"><span class="comment"># 列出所有的container  </span></span><br><span class="line"><span class="variable">$docker</span> ps <span class="operator">-a</span>  </span><br><span class="line"><span class="comment"># 列出最近一次启动的container  </span></span><br><span class="line"><span class="variable">$docker</span> ps <span class="operator">-l</span></span><br></pre></td></tr></table></figure>
<h3 id="保存对容器的修改（commit）">保存对容器的修改（commit）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存对容器的修改; -a, --author="" Author; -m, --message="" Commit message  </span></span><br><span class="line"><span class="variable">$docker</span> commit ID new_image_name</span><br></pre></td></tr></table></figure>
<h3 id="对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）">对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有容器  </span></span><br><span class="line"><span class="variable">$docker</span> rm `docker ps <span class="operator">-a</span> -q`  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container  </span></span><br><span class="line"><span class="variable">$docker</span> rm Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 停止、启动、杀死一个容器  </span></span><br><span class="line"><span class="variable">$docker</span> stop Name/ID  </span><br><span class="line"><span class="variable">$docker</span> start Name/ID  </span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">kill</span> Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps  </span></span><br><span class="line"><span class="variable">$docker</span> logs Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的  </span></span><br><span class="line"><span class="variable">$docker</span> diff Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示一个运行的容器里面的进程信息  </span></span><br><span class="line"><span class="variable">$docker</span> top Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 从容器里面拷贝文件/目录到本地一个路径  </span></span><br><span class="line"><span class="variable">$docker</span> cp Name:/container_path to_path  </span><br><span class="line"><span class="variable">$docker</span> cp ID:/container_path to_path  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10  </span></span><br><span class="line"><span class="variable">$docker</span> restart Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process  </span></span><br><span class="line"><span class="variable">$docker</span> attach ID</span><br></pre></td></tr></table></figure>
<p>Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C</p>
<h3 id="保存和加载镜像（save、load）">保存和加载镜像（save、load）</h3><p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存镜像到一个tar包; -o, --output="" Write to an file  </span></span><br><span class="line"><span class="variable">$docker</span> save image_name -o file_path  </span><br><span class="line"><span class="comment"># 加载一个tar包格式的镜像; -i, --input="" Read from a tar archive file  </span></span><br><span class="line"><span class="variable">$docker</span> load -i file_path  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 机器a  </span></span><br><span class="line"><span class="variable">$docker</span> save image_name &gt; /home/save.tar  </span><br><span class="line"><span class="comment"># 使用scp将save.tar拷到机器b上，然后：  </span></span><br><span class="line"><span class="variable">$docker</span> load &lt; /home/save.tar</span><br></pre></td></tr></table></figure></p>
<h3 id="登录registry_server（login）">登录registry server（login）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登陆registry server; -e, --email="" Email; -p, --password="" Password; -u, --username="" Username  </span></span><br><span class="line"><span class="variable">$docker</span> login  </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### 根据Dockerfile 构建出一个容器</span></span><br><span class="line">``` bash</span><br><span class="line"><span class="comment">#build  </span></span><br><span class="line">      --no-cache=<span class="literal">false</span> Do not use cache when building the image  </span><br><span class="line">      -q, --quiet=<span class="literal">false</span> Suppress the verbose output generated by the containers  </span><br><span class="line">      --rm=<span class="literal">true</span> Remove intermediate containers after a successful build  </span><br><span class="line">      -t, --tag=<span class="string">""</span> Repository name (and optionally a tag) to be applied to the resulting image <span class="keyword">in</span> <span class="keyword">case</span> of success  </span><br><span class="line"><span class="variable">$docker</span> build -t image_name Dockerfile_path</span><br></pre></td></tr></table></figure>
<h2 id="useful_command_of_docker">useful command of docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start a named container, run a bash</span></span><br><span class="line">docker run -i -t --name gst tutum/lamp:latest /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove the container after exit.</span></span><br><span class="line"><span class="comment"># or with -d, run it as a service.</span></span><br><span class="line">docker run -i -t --rm tutum/lamp</span><br><span class="line"></span><br><span class="line"><span class="comment"># run additional command on runing container.</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t gst bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># The -a option to docker ps displays all containers that are currently running or that have exited.</span></span><br><span class="line">docker ps <span class="operator">-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can use docker start to restart a stopped container. After reattaching to it, the contents remain unchanged from the last time that you used the container.</span></span><br><span class="line">docker start <span class="operator">-a</span> -i gst</span><br></pre></td></tr></table></figure>
<h2 id="Docker_compose">Docker compose</h2><p><a href="https://docs.docker.com/compose" target="_blank" rel="external">https://docs.docker.com/compose</a><br><a href="http://docs.oracle.com/cd/E52668_01/E54669/html/section_vn2_l2z_fp.html" target="_blank" rel="external">http://docs.oracle.com/cd/E52668_01/E54669/html/section_vn2_l2z_fp.html</a><br><a href="http://www.open-open.com/lib/view/open1435671611966.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1435671611966.html</a></p>
<h2 id="Docker_file">Docker file</h2><p>The instruction keywords define how to create the image:</p>
<p>ADD<br>Copy the files my.cnf and run.sh from the /var/docker_projects/mymod/mysql directory to /etc/my.cnf and /opt/run.sh in the container.</p>
<p>ENTRYPOINT<br>Specify that the container always runs /opt/run.sh.</p>
<p>ENV<br>Define the web proxy in the build environment (as an alternative to modifying /etc/yum.conf).</p>
<p>FROM<br>Define oraclelinux:6.6 as a basis for the new image.</p>
<p>RUN<br>Install the mysql-server package and make the /opt/run.sh script executable.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile for Rethinkdb </span></span><br><span class="line"><span class="comment"># http://www.rethinkdb.com/</span></span><br><span class="line"></span><br><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">MAINTAINER Michael Crosby &lt;michael@crosbymichael.com&gt;</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu precise main universe"</span> &gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y python-software-properties</span><br><span class="line">RUN add-apt-repository ppa:rethinkdb/ppa</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y rethinkdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rethinkdb process</span></span><br><span class="line">EXPOSE <span class="number">28015</span></span><br><span class="line"><span class="comment"># Rethinkdb admin console</span></span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the /rethinkdb_data dir structure</span></span><br><span class="line">RUN /usr/bin/rethinkdb create</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/bin/rethinkdb"</span>]</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"--help"</span>]</span><br></pre></td></tr></table></figure>
<h1 id="Linqpad">Linqpad</h1><p><a href="http://linqpadsamples.codeplex.com/" target="_blank" rel="external">Some wonderful examples</a></p>
<h1 id="Toolbox">Toolbox</h1><p><code>Linqpad</code> <code>C#</code> <code>F#</code> </p>
<p><code>emacs</code> <code>autohotkey</code></p>
<h1 id="-Net">.Net</h1><p><a href="http://www.c-sharpcorner.com/UploadFile/1492b1/C-Sharp-and-Asp-Net-question-and-answersall-in-one/" target="_blank" rel="external">Common question for C#/.NET</a></p>
<p><a href="https://github.com/catwarrior/awesome-dotnet" target="_blank" rel="external">Awesome dotnet</a></p>
<h1 id="Nuget">Nuget</h1><p>ex:<br><code>Install-Package Microsoft.AspNet.WebApi -Version 5.2.2</code><br><code>Update-Package Microsoft.AspNet.WebApi -reinstall</code></p>
<h1 id="Fsharp">Fsharp</h1><p><code>paket</code> <code>fake</code> <code>Argu - cli argument parsing</code><br><a href="https://github.com/fsprojects" target="_blank" rel="external">https://github.com/fsprojects</a><br><a href="http://fssnip.net/" target="_blank" rel="external">http://fssnip.net/</a></p>
<h1 id="Install_all_stuff_with_one_click">Install all stuff with one click</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">START http://boxstarter.org/package/nr/url?https://raw.githubusercontent.com/catwarrior/garage/master/install.txt</span><br></pre></td></tr></table></figure>
<h1 id="Windows_command">Windows command</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#Create directory junction </span></span><br><span class="line">System.Diagnostics.Process.Start(<span class="string">"cmd.exe"</span>, <span class="string">"/C mklink /J \"C:\\ProgramData\\xxx\\.\" \"C:\\yyy\""</span>);</span><br></pre></td></tr></table></figure>
<h1 id="windows_installer">windows installer</h1><p><code>log</code> <a href="http://www.msifaq.com/a/1022.htm" target="_blank" rel="external">http://www.msifaq.com/a/1022.htm</a></p>
<h1 id="Play_with_router">Play with router</h1><p><a href="https://blog.phpgao.com/xiaomi_router_python.html" target="_blank" rel="external">install python on openrt</a><br><a href="http://www.syncy.cn/" target="_blank" rel="external">sync with baidupan</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[play with elgg]]></title>
      <url>http://catwarrior.github.io/2016/03/29/play-with-elgg/</url>
      <content type="html"><![CDATA[<h2 id="Installing_Elgg_on_Ubuntu_Linux">Installing Elgg on Ubuntu Linux</h2><p>Install the dependencies:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo apt-get install php5 libapache2-mod-php5 php5-mysqlnd</span><br><span class="line">sudo apt-get install phpmyadmin</span><br><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure></p>
<p>Edit /etc/apache2/sites_available/default to enable .htaccess processing (set AllowOverride to All)<br>Restart Apache: sudo /etc/init.d/apache2 restart</p>
<p><a href="http://learn.elgg.org/en/1.x/intro/install/ubuntu.html" target="_blank" rel="external">Follow the standard installation instructions</a><br><a href="http://learn.elgg.org/en/1.x/intro/install.html" target="_blank" rel="external">Elgg</a><br><a href="https://hub.docker.com/r/tutum/lamp/" target="_blank" rel="external">tutum lamp guide</a></p>
<h2 id="setup_lamp_with_Docker">setup lamp with Docker</h2><p><code>boot2docker</code> for windows and mac osx<br>To enable access the container from outside, remember the <code>port forward</code> setting on the VM(on windows, via virtual box).<br>Use <code>tutum/lamp</code> as the image base.<br>Use <code>composer</code> to install elgg.</p>
<h2 id="elgg_install">elgg install</h2><h3 id="port_forward">port forward</h3><p>40080 -&gt; 80<br>43306 -&gt; 3306</p>
<h3 id="get_db_user_password-">get db user password.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs %containerid%</span><br></pre></td></tr></table></figure>
<h3 id="change_db_password">change db password</h3><p>login admin account<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="create_database_via_phpadmin">create database via phpadmin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/wwwroot/</span><br><span class="line">sudo ln <span class="operator">-s</span> /usr/share/phpmyadmin phpmyadmin</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:40080/phpmyadmin" target="_blank" rel="external">http://localhost:40080/phpmyadmin</a></p>
<h3 id="create_the_website_from_elgg">create the website from elgg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="operator">-s</span>S https://getcomposer.org/installer | php</span><br><span class="line">sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/wwwroot/</span><br><span class="line">composer self-update</span><br><span class="line">composer global require <span class="string">"fxp/composer-asset-plugin:~1.1.1"</span></span><br><span class="line">composer create-project elgg/starter-project:dev-master .</span><br><span class="line"><span class="comment"># rename folder to elgg</span></span><br><span class="line">mv starter-project elgg </span><br><span class="line"></span><br><span class="line"><span class="comment">### additional settings</span></span><br><span class="line"><span class="comment">#### enable mod-rewrite</span></span><br><span class="line">``` bash</span><br><span class="line">vi /etc/apache2/sites-available/<span class="number">000</span>-default.conf</span><br><span class="line">``` conf</span><br><span class="line">...</span><br><span class="line">&lt;Directory /var/www/elgg&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="update_elgg_settings">update elgg settings</h4><p>.htaccess<br>settings.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> elgg</span><br><span class="line">cp ../vendor/elgg/elgg/elgg-config/settings.example.php settings.php </span><br><span class="line"><span class="comment"># update the database user password etc.</span></span><br><span class="line">vi settings.php </span><br><span class="line">cp ../vendor/elgg/elgg/install/config/htaccess.dist .htaccess </span><br><span class="line"><span class="comment"># update ??</span></span><br><span class="line">vi .htaccess</span><br></pre></td></tr></table></figure></p>
<h3 id="launch_the_elgg_web_installer">launch the elgg web installer</h3><p><a href="http://localhost:40080" target="_blank" rel="external">http://localhost:40080</a></p>
<h2 id="using_docker_with_multi-container">using docker with multi-container</h2><h3 id="mysql_container">mysql container</h3><p><code>fan6/mysql</code><br>Dockerfile<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM mysql:<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Write Permission</span></span><br><span class="line">RUN usermod -u <span class="number">1000</span> mysql &amp;&amp; chown mysql.mysql /var/run/mysqld/</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">3306</span></span><br><span class="line">VOLUME [<span class="string">"/opt"</span>]</span><br></pre></td></tr></table></figure></p>
<p>create &amp; start the container with local path <code>~/root/db</code> mounted, so db data is persisted.<br>and with given mysql password.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">3306</span>:<span class="number">3306</span> -v ~/root/db:/var/lib/mysql <span class="operator">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -it fan6/mysql</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[my backlog]]></title>
      <url>http://catwarrior.github.io/2016/02/26/my-backlog/</url>
      <content type="html"><![CDATA[<h1 id="Book_backlog">Book backlog</h1><p>Rework<br>Code Complete<br>Domain Driven Design</p>
<h1 id="Naming_things:">Naming things:</h1><p>list<br>pred<br>head<br>tail  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[a better way to secure your wcf services]]></title>
      <url>http://catwarrior.github.io/2016/02/21/a-better-way-to-secure-your-wcf-services/</url>
      <content type="html"><![CDATA[<h2 id="using_inspectors,_you_could_add_headers_to_the_wcf_message,_and_then_you_could_do_authentication-">using inspectors, you could add headers to the wcf message, and then you could do authentication.</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> Inspect client messages : add GUID in headers</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CProcessAuthenticationClientInspector</span> : <span class="title">IClientMessageInspector</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> IClientMessageInspector Membres</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterReceiveReply</span>(<span class="params"><span class="keyword">ref</span> System.ServiceModel.Channels.Message reply, <span class="keyword">object</span> correlationState</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">BeforeSendRequest</span>(<span class="params"><span class="keyword">ref</span> System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        request.Headers.Add(MessageHeader.CreateHeader(<span class="string">"ProcessAuth"</span>, <span class="string">"http://schemas.YOURCOMPANY.com/YOURAPPID"</span>, CProcessAuthenticationBehavior._authToken));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> Inspect server messages : Check GUID</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CProcessAuthenticationDispatchInspector</span> : <span class="title">IDispatchMessageInspector</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> IDispatchMessageInspector Membres</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">AfterReceiveRequest</span>(<span class="params"><span class="keyword">ref</span> Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Guid token = OperationContext.Current.IncomingMessageHeaders.GetHeader&lt;Guid&gt;(<span class="string">"ProcessAuth"</span>, <span class="string">"http://schemas.YOURCOMPANY.com/YOURAPPID"</span>);</span><br><span class="line">        <span class="keyword">if</span> (token != CProcessAuthenticationBehavior._authToken)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid process"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BeforeSendReply</span>(<span class="params"><span class="keyword">ref</span> Message reply, <span class="keyword">object</span> correlationState</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> Add inspectors on both client and server messages</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CProcessAuthenticationBehavior</span> : <span class="title">IEndpointBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> Authentification token known by both sides of the pipe</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> Guid _authToken = Guid.NewGuid();</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> IEndpointBehavior Membres</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddBindingParameters</span>(<span class="params">ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ApplyClientBehavior</span>(<span class="params">ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        clientRuntime.MessageInspectors.Add(<span class="keyword">new</span> CProcessAuthenticationClientInspector());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ApplyDispatchBehavior</span>(<span class="params">ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        endpointDispatcher.DispatchRuntime.MessageInspectors.Add(<span class="keyword">new</span> CProcessAuthenticationDispatchInspector());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Validate</span>(<span class="params">ServiceEndpoint endpoint</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And then you just need to add your endpoint behaviour to your endpoint on both sides :</p>
<p>client :<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ChannelFactory&lt;TInterface&gt; factory;</span><br><span class="line">factory = <span class="keyword">new</span> ChannelFactory&lt;TInterface&gt;(BuildLocalBinding(), <span class="string">"net.pipe://localhost/foo"</span>);</span><br><span class="line">factory.Endpoint.Behaviors.Add(<span class="keyword">new</span> CProcessAuthenticationBehavior());</span><br></pre></td></tr></table></figure></p>
<p>server :<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServiceHost svcHost = <span class="keyword">new</span> System.ServiceModel.ServiceHost(imlpementationType);</span><br><span class="line">svcHost.AddServiceEndpoint(interfaceType, binding, <span class="string">"net.pipe://localhost/foo"</span>);</span><br><span class="line">svcHost.Description.Endpoints[<span class="number">0</span>].Behaviors.Add(<span class="keyword">new</span> CProcessAuthenticationBehavior());</span><br><span class="line">Well... <span class="keyword">this</span> may be done <span class="keyword">in</span> config, but I<span class="string">'ll let you dig :)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="even_more">even more</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">  using System;</span><br><span class="line">    using System.Linq;</span><br><span class="line">    using System.ServiceModel;</span><br><span class="line">    using System.ServiceModel.Channels;</span><br><span class="line">    using System.ServiceModel.Description;</span><br><span class="line">    using System.ServiceModel.Dispatcher;</span><br><span class="line"></span><br><span class="line">    internal class SecurityInspectors : IClientMessageInspector, IDispatchMessageInspector</span><br><span class="line">    &#123;</span><br><span class="line">        static readonly string HEADER_NAME = "token";</span><br><span class="line">        static readonly string HEADER_NS = "token-ns";</span><br><span class="line">        void IClientMessageInspector.AfterReceiveReply(ref Message reply, object correlationState)</span><br><span class="line">        &#123;</span><br><span class="line">            Verify(reply);</span><br><span class="line">        &#125;</span><br><span class="line">        object IClientMessageInspector.BeforeSendRequest(ref Message request, IClientChannel channel)</span><br><span class="line">        &#123;</span><br><span class="line">            // chanlenging provider</span><br><span class="line">            ApplyChallenge(ref request);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        object IDispatchMessageInspector.AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)</span><br><span class="line">        &#123;</span><br><span class="line">            Verify(request);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void IDispatchMessageInspector.BeforeSendReply(ref Message reply, object correlationState)</span><br><span class="line">        &#123;</span><br><span class="line">            // chanlenging client</span><br><span class="line">            ApplyChallenge(ref reply);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void Verify(Message message)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!message.Headers.Any(h =&gt; h.Name == HEADER_NAME &amp;&amp; h.Namespace == HEADER_NS))</span><br><span class="line">                throw new AppAuthenticationException(new FaultReason("API was called by an untrust application"));</span><br><span class="line"></span><br><span class="line">            if (message.Headers.GetHeader&lt;string&gt;(HEADER_NAME, HEADER_NS) != HashSalt())</span><br><span class="line">                throw new AppAuthenticationException(new FaultReason("API was called by an untrust application"));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void ApplyChallenge(ref Message message)</span><br><span class="line">        &#123;</span><br><span class="line">            var token = MessageHeader.CreateHeader(HEADER_NAME, HEADER_NS, HashSalt());</span><br><span class="line">            if (message.Headers.Any(h =&gt; h.Name == token.Name))</span><br><span class="line">            &#123;</span><br><span class="line">                message.Headers.RemoveAll(token.Name, token.Namespace);</span><br><span class="line">            &#125;</span><br><span class="line">            message.Headers.Add(token);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static string HashSalt()</span><br><span class="line">        &#123;</span><br><span class="line">            /// do some magic here to generate a device specific ex： the hash of st</span><br><span class="line">            return GetSalt() + "sff";</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static string GetSalt()</span><br><span class="line">        &#123;</span><br><span class="line">            return "aaaaabb";</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class AppAuthenticationException : FaultException</span><br><span class="line">    &#123;</span><br><span class="line">        public AppAuthenticationException(FaultReason reason = null, FaultCode code = null)</span><br><span class="line">            : base(reason, code)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// This is a wcf operation contract attribute.</span><br><span class="line">    /// It could be attached to an operation contract, will apply two way authentication, and make sure</span><br><span class="line">    /// the wcf service and the client application is both trusted.</span><br><span class="line">    /// for invalid access, there will be a exception `AppAuthenticationException` thrown.</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class AuthenticationRequiredAttribute : Attribute, IEndpointBehavior, IOperationBehavior</span><br><span class="line">    &#123;</span><br><span class="line">        public AuthenticationRequiredAttribute()</span><br><span class="line">        &#123;</span><br><span class="line">#if DEBUG</span><br><span class="line">#else</span><br><span class="line">            var cert1 = System.Reflection.Assembly.GetEntryAssembly().ManifestModule.GetSignerCertificate();</span><br><span class="line">            var cert2 = this.GetType().Assembly.ManifestModule.GetSignerCertificate();</span><br><span class="line">            if (cert2 == null || </span><br><span class="line">                cert2 == null || </span><br><span class="line">                cert1.GetCertHashString() != cert2.GetCertHashString())</span><br><span class="line">                throw new AppAuthenticationException();</span><br><span class="line">#endif</span><br><span class="line">        &#125;</span><br><span class="line">        #region IEndpointBehavior Members  </span><br><span class="line">        public void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) &#123; &#125;</span><br><span class="line">        public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)</span><br><span class="line">        &#123;</span><br><span class="line">            clientRuntime.MessageInspectors.Add(new SecurityInspectors());</span><br><span class="line">        &#125;</span><br><span class="line">        public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)</span><br><span class="line">        &#123;</span><br><span class="line">            endpointDispatcher.DispatchRuntime.MessageInspectors.Add(new SecurityInspectors());</span><br><span class="line">        &#125;</span><br><span class="line">        public void Validate(ServiceEndpoint endpoint) &#123; &#125;</span><br><span class="line">        #endregion</span><br><span class="line"></span><br><span class="line">        #region IOperationBehavior Members  </span><br><span class="line">        public void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters) &#123; &#125;</span><br><span class="line">        public void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation)</span><br><span class="line">        &#123;</span><br><span class="line">            clientOperation.Parent.MessageInspectors.Add(new SecurityInspectors());</span><br><span class="line">        &#125;</span><br><span class="line">        public void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation)</span><br><span class="line">        &#123;</span><br><span class="line">            dispatchOperation.Parent.MessageInspectors.Add(new SecurityInspectors());</span><br><span class="line">        &#125;</span><br><span class="line">        public void Validate(OperationDescription operationDescription) &#123; &#125;</span><br><span class="line">        #endregion</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>usage, just add attribute on the contract, no changes on the client.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ServiceContract]</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IService</span></span><br><span class="line">&#123;</span><br><span class="line">    [OperationContract]</span><br><span class="line">    [AuthenticationRequired]</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">SayHelloTo</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tips of using linqpad]]></title>
      <url>http://catwarrior.github.io/2016/02/19/tips-of-using-linqpad/</url>
      <content type="html"><![CDATA[<h2 id="linqpad_a_very_convenient_tool_for_quick_coding-">linqpad a very convenient tool for quick coding.</h2><p>You could write sql, c# statements.<br>And also it’s very smart to connect to a database, or table storage.<br>    context.EntityX.DeleteOnSubmit(<code>entity</code>);<br>    context.EntityX.DeleteAllOnSubmit(<code>entities</code>);</p>
<p>##<br>linq pad.<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pubs = <span class="keyword">from</span> p <span class="keyword">in</span> PublishedNotifications </span><br><span class="line">           <span class="keyword">where</span> p.Nid == <span class="number">1301</span></span><br><span class="line">		   <span class="keyword">select</span> p;</span><br><span class="line">PublishedNotifications.DeleteAllOnSubmit(pubs);</span><br><span class="line">SubmitChanges();</span><br></pre></td></tr></table></figure></p>
<p>EF way.<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> MyDbContext())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> itemsToDelete = context.Set&lt;MyTable&gt;();</span><br><span class="line">    context.MyTables.RemoveRange(itemsToDelete);</span><br><span class="line">    context.SaveChanges();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>linqpad insert<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Employee newEmployee = <span class="keyword">new</span> Employee</span><br><span class="line">&#123;</span><br><span class="line">	FirstName = <span class="string">"Bob"</span>,</span><br><span class="line">	LastName = <span class="string">"Barker"</span></span><br><span class="line">&#125;;</span><br><span class="line">Employees.InsertOnSubmit(newEmployee);</span><br><span class="line">SubmitChanges();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lazy initialize in .net]]></title>
      <url>http://catwarrior.github.io/2016/02/14/lazy-initialize-in-net/</url>
      <content type="html"><![CDATA[<p>Lazy initialization of an object means that its creation is deferred until it is first used.<br>|Type              |     Description<br>|   —————|—————–<br>| Lazy<t>          |    A wrapper class that provides lazy initialization semantics for any class library or user-defined type.<br>| ThreadLocal<t>   |    Resembles Lazy<t> except that it provides lazy initialization semantics on a  thread-local basis. Every thread has access to its own unique value.<br>| LazyInitializer  |    Provides advanced static (Shared in Visual Basic) methods for lazy initialization of objects without the overhead of a class.</t></t></t></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lazy&lt;Orders&gt; _orders = <span class="keyword">new</span> Lazy&lt;Orders&gt;(() =&gt; <span class="keyword">new</span> Orders(<span class="number">100</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;<span class="keyword">int</span>&gt; betterCounter = <span class="keyword">new</span> ThreadLocal&lt;<span class="keyword">int</span>&gt;(() =&gt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assume that _orders contains null values, and</span></span><br><span class="line"><span class="comment">// we only need to initialize them if displayOrderInfo is true</span></span><br><span class="line"><span class="keyword">if</span>(displayOrderInfo == <span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _orders.Length; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="comment">// Lazily initialize the orders without wrapping them in a Lazy&lt;T&gt;</span></span><br><span class="line">     LazyInitializer.EnsureInitialized(<span class="keyword">ref</span> _orders[i], () =&gt;</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">// Returns the value that will be placed in the ref parameter.</span></span><br><span class="line">             <span class="keyword">return</span> GetOrderForIndex(i);</span><br><span class="line">         &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[work comfortable on mac]]></title>
      <url>http://catwarrior.github.io/2016/02/03/work-comfortable-on-mac/</url>
      <content type="html"><![CDATA[<p><a href="http://www.07net01.com/2015/11/962749.html" target="_blank" rel="external">http://www.07net01.com/2015/11/962749.html</a></p>
<p><a href="http://www.07net01.com/tags-%E8%8B%B9%E6%9E%9C-0.html" target="_blank" rel="external">http://www.07net01.com/tags-%E8%8B%B9%E6%9E%9C-0.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java multithreading guide]]></title>
      <url>http://catwarrior.github.io/2016/02/03/java-multithreading-guide/</url>
      <content type="html"><![CDATA[<h1 id="Java_程序中的多线程">Java 程序中的多线程</h1><p>由于在语言级提供了线程支持，在 Java 语言中使用多线程要远比在 C 或 C++ 中来得简单。本文通过简单的程序示例展现了在 Java 程序中线程编程的简单性。在学习完本文后，用户应该能够编写简单、多线程的程序。</p>
<p>在 Java 程序中使用多线程要比在 C 或 C++ 中容易得多，这是因为 Java 编程语言提供了语言级的支持。本文通过简单的编程示例来说明 Java 程序中的多线程是多么直观。读完本文以后，用户应该能够编写简单的多线程程序。</p>
<h2 id="为什么会排队等待？">为什么会排队等待？</h2><p>下面的这个简单的 Java 程序完成四项不相关的任务。这样的程序有单个控制线程，控制在这四个任务之间线性地移动。此外，因为所需的资源 ― 打印机、磁盘、数据库和显示屏 – 由于硬件和软件的限制都有内在的潜伏时间，所以每项任务都包含明显的等待时间。因此，程序在访问数据库之前必须等待打印机完成打印文件的任务，等等。如果您正在等待程序的完成，则这是对计算资源和您的时间的一种拙劣使用。改进此程序的一种方法是使它成为多线程的。</p>
<p><em>四项不相关的任务</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        print_a_file();</span><br><span class="line">        manipulate_another_file();</span><br><span class="line">        access_database();</span><br><span class="line">        draw_picture_on_screen();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>在本例中，每项任务在开始之前必须等待前一项任务完成，即使所涉及的任务毫不相关也是这样。但是，在现实生活中，我们经常使用多线程模型。我们在处理某些任务的同时也可以让孩子、配偶和父母完成别的任务。例如，我在写信的同时可能打发我的儿子去邮局买邮票。用软件术语来说，这称为多个控制（或执行）线程。</p>
<ul>
<li><p>多个进程</p>
<p>在大多数操作系统中都可以创建多个进程。当一个程序启动时，它可以为即将开始的每项任务创建一个进程，并允许它们同时运行。当一个程序因等待网络访问或用户输入而被阻塞时，另一个程序还可以运行，这样就增加了资源利用率。但是，按照这种方式创建每个进程要付出一定的代价：设置一个进程要占用相当一部分处理器时间和内存资源。而且，大多数操作系统不允许进程访问其他进程的内存空间。因此，进程间的通信很不方便，并且也不会将它自己提供给容易的编程模型。</p>
</li>
<li><p>线程</p>
<p>线程也称为轻型进程 (LWP)。因为线程只能在单个进程的作用域内活动，所以创建线程比创建进程要廉价得多。这样，因为线程允许协作和数据交换，并且在计算资源方面非常廉价，所以线程比进程更可取。线程需要操作系统的支持，因此不是所有的机器都提供线程。Java 编程语言，作为相当新的一种语言，已将线程支持与语言本身合为一体，这样就对线程提供了强健的支持。</p>
</li>
</ul>
<h2 id="使用_Java_编程语言实现线程">使用 Java 编程语言实现线程</h2><p>Java 编程语言使多线程如此简单有效，以致于某些程序员说它实际上是自然的。尽管在 Java 中使用线程比在其他语言中要容易得多，仍然有一些概念需要掌握。要记住的一件重要的事情是 main() 函数也是一个线程，并可用来做有用的工作。程序员只有在需要多个线程时才需要创建新的线程。</p>
<h3 id="Thread_类">Thread 类</h3><p>Thread 类是一个具体的类，即不是抽象类，该类封装了线程的行为。要创建一个线程，程序员必须创建一个从 Thread 类导出的新类。程序员必须覆盖 Thread 的 run() 函数来完成有用的工作。用户并不直接调用此函数；而是必须调用 Thread 的 start() 函数，该函数再调用 run()。下面的代码说明了它的用法：</p>
<p><em>创建两个新线程</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimePrinter</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pauseTime;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimePrinter</span><span class="params">(<span class="keyword">int</span> x, String n)</span> </span>&#123;</span><br><span class="line">        pauseTime = x;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">":"</span> + <span class="keyword">new</span> </span><br><span class="line">                    Date(System.currentTimeMillis()));</span><br><span class="line">                Thread.sleep(pauseTime);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        TimePrinter tp1 = <span class="keyword">new</span> TimePrinter(<span class="number">1000</span>, <span class="string">"Fast Guy"</span>);</span><br><span class="line">        tp1.start();</span><br><span class="line">        TimePrinter tp2 = <span class="keyword">new</span> TimePrinter(<span class="number">3000</span>, <span class="string">"Slow Guy"</span>);</span><br><span class="line">        tp2.start();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在本例中，我们可以看到一个简单的程序，它按两个不同的时间间隔（1 秒和 3 秒）在屏幕上显示当前时间。这是通过创建两个新线程来完成的，包括 main() 共三个线程。但是，因为有时要作为线程运行的类可能已经是某个类层次的一部分，所以就不能再按这种机制创建线程。虽然在同一个类中可以实现任意数量的接口，但 Java 编程语言只允许一个类有一个父类。同时，某些程序员避免从 Thread 类导出，因为它强加了类层次。对于这种情况，就要 runnable 接口。</p>
<h3 id="Runnable_接口">Runnable 接口</h3><p>此接口只有一个函数，run()，此函数必须由实现了此接口的类实现。但是，就运行这个类而论，其语义与前一个示例稍有不同。我们可以用 runnable 接口改写前一个示例。（不同的部分用黑体表示。）<br><em>创建两个新线程而不强加类层次</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimePrinter</span> </span><br><span class="line">        <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pauseTime;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimePrinter</span><span class="params">(<span class="keyword">int</span> x, String n)</span> </span>&#123;</span><br><span class="line">        pauseTime = x;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">":"</span> + <span class="keyword">new</span> </span><br><span class="line">                    Date(System.currentTimeMillis()));</span><br><span class="line">                Thread.sleep(pauseTime);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread (<span class="keyword">new</span> TimePrinter(<span class="number">1000</span>, <span class="string">"Fast Guy"</span>));</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread (<span class="keyword">new</span> TimePrinter(<span class="number">3000</span>, <span class="string">"Slow Guy"</span>));</span><br><span class="line">        t2.start();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>请注意，当使用 runnable 接口时，您不能直接创建所需类的对象并运行它；必须从 Thread 类的一个实例内部运行它。许多程序员更喜欢 runnable 接口，因为从 Thread 类继承会强加类层次。</p>
<h3 id="synchronized_关键字">synchronized 关键字</h3><p>到目前为止，我们看到的示例都只是以非常简单的方式来利用线程。只有最小的数据流，而且不会出现两个线程访问同一个对象的情况。但是，在大多数有用的程序中，线程之间通常有信息流。试考虑一个金融应用程序，它有一个 Account 对象，如下例中所示：</p>
<p><em>一个银行中的多项活动</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    String holderName;</span><br><span class="line">    <span class="keyword">float</span> amount;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name, <span class="keyword">float</span> amt)</span> </span>&#123;</span><br><span class="line">        holderName = name;</span><br><span class="line">        amount = amt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">float</span> amt)</span> </span>&#123;</span><br><span class="line">        amount += amt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">float</span> amt)</span> </span>&#123;</span><br><span class="line">        amount -= amt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">checkBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在此代码样例中潜伏着一个错误。如果此类用于单线程应用程序，不会有任何问题。但是，在多线程应用程序的情况中，不同的线程就有可能同时访问同一个 Account 对象，比如说一个联合帐户的所有者在不同的 ATM 上同时进行访问。在这种情况下，存入和支出就可能以这样的方式发生：一个事务被另一个事务覆盖。这种情况将是灾难性的。但是，Java 编程语言提供了一种简单的机制来防止发生这种覆盖。每个对象在运行时都有一个关联的锁。这个锁可通过为方法添加关键字 synchronized 来获得。这样，修订过的 Account 对象（如下所示）将不会遭受像数据损坏这样的错误：<br><em>对一个银行中的多项活动进行同步处理</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    String holderName;</span><br><span class="line">    <span class="keyword">float</span> amount;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name, <span class="keyword">float</span> amt)</span> </span>&#123;</span><br><span class="line">        holderName = name;</span><br><span class="line">        amount = amt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> </span><br><span class="line">        <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">float</span> amt)</span> </span>&#123;</span><br><span class="line">        amount += amt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> </span><br><span class="line">        <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">float</span> amt)</span> </span>&#123;</span><br><span class="line">        amount -= amt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">checkBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>deposit() 和 withdraw() 函数都需要这个锁来进行操作，所以当一个函数运行时，另一个函数就被阻塞。请注意， checkBalance() 未作更改，它严格是一个读函数。因为 checkBalance() 未作同步处理，所以任何其他方法都不会阻塞它，它也不会阻塞任何其他方法，不管那些方法是否进行了同步处理。</p>
<h2 id="Java_编程语言中的高级多线程支持">Java 编程语言中的高级多线程支持</h2><p>线程组</p>
<p>线程是被个别创建的，但可以将它们归类到 线程组中，以便于调试和监视。只能在创建线程的同时将它与一个线程组相关联。在使用大量线程的程序中，使用线程组组织线程可能很有帮助。可以将它们看作是计算机上的目录和文件结构。</p>
<p>线程间发信</p>
<p>当线程在继续执行前需要等待一个条件时，仅有 synchronized 关键字是不够的。虽然 synchronized 关键字阻止并发更新一个对象，但它没有实现 线程间发信 。Object 类为此提供了三个函数：wait()、notify() 和 notifyAll()。以全球气候预测程序为例。这些程序通过将地球分为许多单元，在每个循环中，每个单元的计算都是隔离进行的，直到这些值趋于稳定，然后相邻单元之间就会交换一些数据。所以，从本质上讲，在每个循环中各个线程都必须等待所有线程完成各自的任务以后才能进入下一个循环。这个模型称为 屏蔽同步，下例说明了这个模型：</p>
<p><em>屏蔽同步</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalThreads;</span><br><span class="line">    <span class="keyword">int</span> currentThreads;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSync</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        totalThreads = x;</span><br><span class="line">        currentThreads = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitForAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentThreads++;</span><br><span class="line">        <span class="keyword">if</span>(currentThreads &lt; totalThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            currentThreads = <span class="number">0</span>;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当对一个线程调用 wait() 时，该线程就被有效阻塞，只到另一个线程对同一个对象调用 notify() 或 notifyAll() 为止。因此，在前一个示例中，不同的线程在完成它们的工作以后将调用 waitForAll() 函数，最后一个线程将触发 notifyAll() 函数，该函数将释放所有的线程。第三个函数 notify() 只通知一个正在等待的线程，当对每次只能由一个线程使用的资源进行访问限制时，这个函数很有用。但是，不可能预知哪个线程会获得这个通知，因为这取决于 Java 虚拟机 (JVM) 调度算法。</p>
<p><strong>将 CPU 让给另一个线程</strong></p>
<p>当线程放弃某个稀有的资源（如数据库连接或网络端口）时，它可能调用 yield() 函数临时降低自己的优先级，以便某个其他线程能够运行。</p>
<p><strong>守护线程</strong></p>
<p>有两类线程：用户线程和守护线程。 用户线程是那些完成有用工作的线程。 守护线程 是那些仅提供辅助功能的线程。Thread 类提供了 setDaemon() 函数。Java 程序将运行到所有用户线程终止，然后它将破坏所有的守护线程。在 Java 虚拟机 (JVM) 中，即使在 main 结束以后，如果另一个用户线程仍在运行，则程序仍然可以继续运行。</p>
<h2 id="避免不提倡使用的方法">避免不提倡使用的方法</h2><p>不提倡使用的方法是为支持向后兼容性而保留的那些方法，它们在以后的版本中可能出现，也可能不出现。Java 多线程支持在版本 1.1 和版本 1.2 中做了重大修订，stop()、suspend() 和 resume() 函数已不提倡使用。这些函数在 JVM 中可能引入微妙的错误。虽然函数名可能听起来很诱人，但请抵制诱惑不要使用它们。</p>
<h2 id="调试线程化的程序">调试线程化的程序</h2><p>在线程化的程序中，可能发生的某些常见而讨厌的情况是死锁、活锁、内存损坏和资源耗尽。</p>
<h3 id="死锁">死锁</h3><p>死锁可能是多线程程序最常见的问题。当一个线程需要一个资源而另一个线程持有该资源的锁时，就会发生死锁。这种情况通常很难检测。但是，解决方案却相当好：在所有的线程中按相同的次序获取所有资源锁。例如，如果有四个资源 ―A、B、C 和 D ― 并且一个线程可能要获取四个资源中任何一个资源的锁，则请确保在获取对 B 的锁之前首先获取对 A 的锁，依此类推。如果“线程 1”希望获取对 B 和 C 的锁，而“线程 2”获取了 A、C 和 D 的锁，则这一技术可能导致阻塞，但它永远不会在这四个锁上造成死锁。</p>
<h3 id="活锁">活锁</h3><p>当一个线程忙于接受新任务以致它永远没有机会完成任何任务时，就会发生活锁。这个线程最终将超出缓冲区并导致程序崩溃。试想一个秘书需要录入一封信，但她一直在忙于接电话，所以这封信永远不会被录入。</p>
<h3 id="内存损坏">内存损坏</h3><p>如果明智地使用 synchronized 关键字，则完全可以避免内存错误这种气死人的问题。</p>
<h3 id="资源耗尽">资源耗尽</h3><p>某些系统资源是有限的，如文件描述符。多线程程序可能耗尽资源，因为每个线程都可能希望有一个这样的资源。如果线程数相当大，或者某个资源的侯选线程数远远超过了可用的资源数，则最好使用 资源池。一个最好的示例是数据库连接池。只要线程需要使用一个数据库连接，它就从池中取出一个，使用以后再将它返回池中。资源池也称为 资源库。</p>
<h2 id="限制线程优先级和调度">限制线程优先级和调度</h2><p>Java 线程模型涉及可以动态更改的线程优先级。本质上，线程的优先级是从 1 到 10 之间的一个数字，数字越大表明任务越紧急。JVM 标准首先调用优先级较高的线程，然后才调用优先级较低的线程。但是，该标准对具有相同优先级的线程的处理是随机的。如何处理这些线程取决于基层的操作系统策略。在某些情况下，优先级相同的线程分时运行；在另一些情况下，线程将一直运行到结束。请记住，Java 支持 10 个优先级，基层操作系统支持的优先级可能要少得多，这样会造成一些混乱。因此，只能将优先级作为一种很粗略的工具使用。最后的控制可以通过明智地使用 yield() 函数来完成。通常情况下，请不要依靠线程优先级来控制线程的状态。</p>
<h2 id="小结">小结</h2><p>本文说明了在 Java 程序中如何使用线程。像是否 应该使用线程这样的更重要的问题在很大程序上取决于手头的应用程序。决定是否在应用程序中使用多线程的一种方法是，估计可以并行运行的代码量。并记住以下几点：</p>
<ul>
<li>使用多线程不会增加 CPU 的能力。但是如果使用 JVM 的本地线程实现，则不同的线程可以在不同的处理器上同时运行（在多 CPU 的机器中），从而使多 CPU 机器得到充分利用。</li>
<li>如果应用程序是计算密集型的，并受 CPU 功能的制约，则只有多 CPU 机器能够从更多的线程中受益。</li>
<li>当应用程序必须等待缓慢的资源（如网络连接或数据库连接）时，或者当应用程序是非交互式的时，多线程通常是有利的。</li>
</ul>
<p>基于 Internet 的软件有必要是多线程的；否则，用户将感觉应用程序反映迟钝。例如，当开发要支持大量客户机的服务器时，多线程可以使编程较为容易。在这种情况下，每个线程可以为不同的客户或客户组服务，从而缩短了响应时间。</p>
<p>某些程序员可能在 C 和其他语言中使用过线程，在那些语言中对线程没有语言支持。这些程序员可能通常都被搞得对线程失去了信心。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[.net based applications are slow to load]]></title>
      <url>http://catwarrior.github.io/2016/01/29/net-based-applications-are-slow-to-load/</url>
      <content type="html"><![CDATA[<p><a href="http://austintovey.blogspot.com/2012/01/net-bases-applications-are-slow-to-load.html" target="_blank" rel="external">.NET bases applications are slow to load or certain in-app tasks are slow</a></p>
<p>This behaviour will occur with any .NET 1.1 and 2.0 assembly that is authenticode-signed, not only Measurement Studio assemblies. Digital signing is also referred to as code signing. Code signing a .NET library is strongly recommended by Microsoft, and Measurement Studio signs all of our ActiveX and .NET components.</p>
<p>Code signing of assemblies makes components tamper-proof and ensures that you know the identity of the component publisher.</p>
<p>The reason why this problem is occurring is because of the mechanism used by the .NET Common Language Runtime (CLR) to verify code-signed .NET assemblies. Part of the verification process requires an online look-up to check whether the certificate with which the assembly is signed has been revoked and is no longer valid. Windows does this by downloading a CRL (Certificate Revocation List). The first time a code-signed assembly is loaded by the .NET CLR, the CRL is downloaded from the certificate provider’s server and cached on the system.</p>
<p>When the .NET CLR loads a code-signed assembly and is unable to reach the CRL distribution point, it records the failure as an inability to provide the assembly evidence that it was code-signed. So the assembly is allowed to load, but is not marked as being digitally signed. There is a 15 second delay for CRL retrievals. This is how long the CLR will keep on re-trying to download the CRL before it finally times out. So the delay in loading the .NET assembly occurs because Windows is unable to download the CRL and keeps trying to download it for 15 seconds before timing out.</p>
<p>This behavior is by design.</p>
<p>The .NET CLR will not indicate any error or throw any security exception when verifying a signed assembly if the CRL distribution point cannot be reached. An error here from WinVerifyTrust(), the API used by the .NET CLR to verify a code signed assembly, prevents the assembly from being marked as code signed. Note that this does not apply to assemblies loaded thru the Internet Explorer hosting interface.</p>
<p>You could manually download the CRL and install it on your system. But the CRL is valid only for 10-15 days, so unless your system is able to update the file after this time, you will run into the same problem again.</p>
<p>Microsoft recommends disabling CRL checking as a workaround by disabling this option in Internet Explorer. Use the following steps to disable the CRL checking in Internet Explorer:<br>Select Start»Control Panel.<br>Double-click Internet Options.<br>Select the Advanced tab.<br>In the Security section, uncheck the Check for publisher’s certificate revocation option.<br>By disabling the CRL checking using the Internet Options, you are not exposing yourself to a security threat because this check is not working. The reason why this problem is showing up is because your network settings are not allowing Windows to access the CRL.</p>
<p>In addition, it is possible to programmatically set the CRL verification. When the Check for publisher’s certificate revocation is unchecked, a setting in the registry is changed. To turn off CRL verification, set HKCU\Software\Microsoft\Windows\CurrentVersion\WinTrust\Trust Providers\Software Publishing\State  from 0x00023c00 to 0x00023e00. To turn CRL Checking on again, reset the State key to 0x00023c00</p>
<p><a href="http://stackoverflow.com/questions/6042555/why-my-net-application-horribly-slow-to-start-after-the-machine-is-rebooted" target="_blank" rel="external">http://stackoverflow.com/questions/6042555/why-my-net-application-horribly-slow-to-start-after-the-machine-is-rebooted</a><br><a href="http://stackoverflow.com/questions/1618596/why-are-signed-assemblies-slow-to-load/" target="_blank" rel="external">http://stackoverflow.com/questions/1618596/why-are-signed-assemblies-slow-to-load/</a><br><a href="http://www.actiprosoftware.com/support/kb/article/20001/code-signed-assemblies-can-make-application-s" target="_blank" rel="external">http://www.actiprosoftware.com/support/kb/article/20001/code-signed-assemblies-can-make-application-s</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[notes of asp.net core 1.0 & azure]]></title>
      <url>http://catwarrior.github.io/2016/01/27/notes-of-asp-net-core-1-0/</url>
      <content type="html"><![CDATA[<p><a href="https://docs.asp.net/en/latest/" target="_blank" rel="external">ASP.NET 5 Documentation</a><br><a href="https://azure.microsoft.com/en-us/documentation/services/service-fabric/" target="_blank" rel="external">Azure Service Fabric</a><br><a href="https://azure.microsoft.com/en-us/documentation/videos/azure-friday/" target="_blank" rel="external">Azure Friday</a></p>
<p><a href="https://www.youtube.com/watch?v=w6Sq3Ce5ChI&amp;list=PL0M0zPgJ3HSftTAAHttA3JQU4vOjXFquF&amp;index=23" target="_blank" rel="external">ASP.NET 5 Community Standup</a></p>
<h2 id="Modern_Application_Lifecycle_Management_and_DevOps">Modern Application Lifecycle Management and <code>DevOps</code></h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[notes of MEAN practice]]></title>
      <url>http://catwarrior.github.io/2016/01/26/notes-of-MEAN-practice/</url>
      <content type="html"><![CDATA[<p><a href="https://thinkster.io/mean-stack-tutorial" target="_blank" rel="external">Learn to Build Modern Web Apps with MEAN</a><br><a href="http://jkchu.com/2015/06/23/node-js-for-side-projects/" target="_blank" rel="external">Node JS For Side Projects</a><br><a href="http://www.infoq.com/cn/news/2016/01/chakracore" target="_blank" rel="external">微软开源Chakra，并计划在上面运行Node.js</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[notes of learning java]]></title>
      <url>http://catwarrior.github.io/2016/01/21/notes-of-learning-java/</url>
      <content type="html"><![CDATA[<h2 id="Reading_book_Think_in_Java">Reading book <code>Think in Java</code></h2><h2 id="Reading_book_Effective_java">Reading book <code>Effective java</code></h2><h2 id="Environment">Environment</h2><p>– Groovy<br>  AST transform</p>
<ul>
<li>Gradle</li>
<li>PsGet<br><a href="http://psget.net/" target="_blank" rel="external">http://psget.net/</a>   (powershell module repository)<br>Set-ExecutionPolicy RemoteSigned<br>(new-object Net.WebClient).DownloadString(“<a href="http://psget.net/GetPsGet.ps1" target="_blank" rel="external">http://psget.net/GetPsGet.ps1</a>“) | iex<br>Get-PsGetModuleInfo Posh*</li>
<li>Sprint</li>
<li><p>Sprint boot<br><a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-introducing-spring-boot" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-introducing-spring-boot</a><br><a href="http://blog.csdn.net/z69183787/article/category/5580807" target="_blank" rel="external">http://blog.csdn.net/z69183787/article/category/5580807</a></p>
<p>spring boot on eclipse, would better install <a href="http://spring.io/tools/sts/all" target="_blank" rel="external"><code>Spring Tool Suite</code></a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[generators in programming]]></title>
      <url>http://catwarrior.github.io/2016/01/17/generators-in-programming/</url>
      <content type="html"><![CDATA[<p>I’m reading python recently, the reason is, it is popular and wildly used, and it’s also muture.</p>
<p>There is concept “generators” in python, which is used to compute a value at runtime.<br>ex.<br>{codeblock}<br>list = [x for x in range(1,100)]<br>{endcodeblock}<br>In fact, this will create a list of 100 items with values, most of the time it’s ok, but when item number<br>is very large, or even unpredictable, you cannot do this.<br>So here comes the generators.</p>
<p>{codeblock}<br>g = (x for x in range(1,100))<br>{endcodeblock}<br>when you type <code>g</code> in the py commandline, it will tell you <code>g</code> is a generator type, you can call <code>next(g)</code> to<br>iterate the data members.</p>
<p>you could even create your function act as a generator, the key is the keyword <code>yield</code>.</p>
<p>{codeblock}<br>def odd():<br>    print(‘step 1’)<br>    yield 1<br>    print(‘step 2’)<br>    yield(3)<br>    print(‘step 3’)<br>    yield(5)<br>{endcodeblock}</p>
<p>Actually, it’s common concept in programming languages, for example, C# also have <code>yield</code>, exactly the same. </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[exception handling best practise in .net]]></title>
      <url>http://catwarrior.github.io/2016/01/12/exception-handling-best-practise-in-net/</url>
      <content type="html"><![CDATA[<p>cite from <a href="http://www.codeproject.com/Articles/9538/Exception-Handling-Best-Practices-in-NET" target="_blank" rel="external">http://www.codeproject.com/Articles/9538/Exception-Handling-Best-Practices-in-NET</a></p>
<ul>
<li>Plan for the worst</li>
<li>Check it early</li>
<li>Don’t trust external data</li>
<li>The only reliable devices are: the video, the mouse and keyboard.</li>
<li>Writes can fail, too</li>
<li>Code Safely</li>
<li>Don’t throw new Exception()</li>
<li>Don’t put important exception information on the Message field</li>
<li>Put a single catch (Exception ex) per thread</li>
<li>Generic Exceptions caught should be published</li>
<li>Log Exception.ToString(); never log only Exception.Message!</li>
<li>Don’t catch (Exception) more than once per thread</li>
<li>Don’t ever swallow exceptions</li>
<li>Cleanup code should be put in finally blocks</li>
<li>Use “using” everywhere</li>
<li>Don’t return special values on error conditions</li>
<li>Don’t use exceptions to indicate absence of a resource</li>
<li>Don’t use exception handling as means of returning information from a method</li>
<li>Use exceptions for errors that should not be ignored</li>
<li>Don’t clear the stack trace when re-throwing an exception</li>
<li>Avoid changing exceptions without adding semantic value</li>
<li>Exceptions should be marked [Serializable]</li>
<li>When in doubt, don’t Assert, throw an Exception</li>
<li>Each exception class should have at least the three original constructors</li>
<li>Be careful when using the AppDomain.UnhandledException event</li>
<li>Don’t reinvent the wheel</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[power shell tips]]></title>
      <url>http://catwarrior.github.io/2016/01/05/power-shell-tips/</url>
      <content type="html"><![CDATA[<p><a href="https://technet.microsoft.com/en-us/scriptcenter/dd772285.aspx" target="_blank" rel="external">A Task-Based Guide to Windows PowerShell Cmdlets</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[setup nodejs on windows as a build server]]></title>
      <url>http://catwarrior.github.io/2015/12/28/setup-nodejs-on-windows-as-a-build-server/</url>
      <content type="html"><![CDATA[<p>Installing NodeJS<br>Jenkins NodeJS plugin does not work on Windows, so we’ll do a manual installation.</p>
<p>Download latest stable version (e.g. 0.10.35) from <a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a></p>
<p>Don’t install to default directory C:\Program Files\nodejs as it requires administration rights, prefer a simpler path like c:\nodejs.</p>
<p><a href="http://blog.majgis.com/npm-nodejs-fails-when-run-from-jenkins-on-windows/" target="_blank" rel="external">http://blog.majgis.com/npm-nodejs-fails-when-run-from-jenkins-on-windows/</a></p>
<p>Edit C:\nodejs\node_modules\npm\npmrc to replace<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prefix=<span class="variable">$&#123;APPDATA&#125;</span>\npm</span><br></pre></td></tr></table></figure></p>
<p>by</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prefix=C:\nodejs\node_modules\npm</span><br></pre></td></tr></table></figure>
<p>Add the ‘C:\nodejs\node_modules\npm’ folder to the PATH environment variable, remove the one that was added by the installer: ‘C:\Users<user>\AppData\Roaming\npm’</user></p>
<p>npm may require git, install it from <a href="http://msysgit.github.io/" target="_blank" rel="external">http://msysgit.github.io/</a></p>
<p>Add bower and grunt:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g bower grunt-cli</span><br><span class="line">bower --version</span><br><span class="line">grunt --version</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[notes of powershell]]></title>
      <url>http://catwarrior.github.io/2015/12/27/notes-of-powershell/</url>
      <content type="html"><![CDATA[<h2 id="using_where_in_pipeline">using where in pipeline</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Clear-Host</span><br><span class="line"><span class="variable">$objNetwork</span> = <span class="built_in">Get-WmiObject</span> -List | Where &#123;<span class="variable">$_</span>.name <span class="operator">-Match</span> <span class="string">"Network"</span>&#125;</span><br><span class="line"><span class="variable">$objNetwork</span> | <span class="built_in">Format-Table</span> name</span><br></pre></td></tr></table></figure>
<h2 id="PS_vs_plugin">PS vs plugin</h2><p><a href="https://visualstudiogallery.msdn.microsoft.com/c9eb3ba8-0c59-4944-9a62-6eee37294597" target="_blank" rel="external">https://visualstudiogallery.msdn.microsoft.com/c9eb3ba8-0c59-4944-9a62-6eee37294597</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[new way to to manage software on windows]]></title>
      <url>http://catwarrior.github.io/2015/11/23/new-way-to-to-manage-software-on-windows/</url>
      <content type="html"><![CDATA[<p>In the previous post we mentioned about <code>Chocolatey</code>, this time let’s do some more interest things which related to it.</p>
<p>After <code>Chocolatey</code> installed.</p>
<p><code>scriptcs</code> makes it easy to write and execute C# with a simple text editor.</p>
<p>To install <code>scriptcs</code>, just run scriptcs</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[10 tools that change your life]]></title>
      <url>http://catwarrior.github.io/2015/11/23/10-tools-that-change-your-life/</url>
      <content type="html"><![CDATA[<blockquote><p>“Productivity is being able to do things that you were never able to do before.”</p>
<footer><strong>Franz Kafka</strong></footer></blockquote>
<p>引自 <a href="http://zhuanlan.zhihu.com/always-a-tool/19662365" target="_blank" rel="external">知乎</a> <a href="http://www.hanselman.com/blog/ScottHanselmans2014UltimateDeveloperAndPowerUsersToolListForWindows.aspx" target="_blank" rel="external">UltimateDeveloperAndPowerUsersToolListForWindows</a></p>
<ul>
<li><a href="http://www.chocolatey.org/" target="_blank" rel="external">Chocolatey</a> - 名字很奇特，但它可是 Windows 上的 apt-get。一旦拥有，别无所求。现在我想装软件的时候，会首先想到它而不是 Google。刚刚我还在用 ‘cinst filezilla’ 和 ‘cinst winscp’ 来安装我想要的东西呢。想想看，利用它你就可以把「装机」变成一个极其简单的事情。不过自己写脚本还是太复杂，对于装机，你应该用……<ul>
<li><a href="http://boxstarter.org/" target="_blank" rel="external">Boxstarter</a> - Matt Wrock 利用 Chocolatey 和 Nuget 构建了这个神奇的东西。它可以大幅简化你在更新电脑时候的工作，也可以在远程机器或者虚拟机上进行无人值守的环境部署。</li>
</ul>
</li>
<li><a href="http://codesector.com/teracopy" target="_blank" rel="external">TeraCopy</a> - 大多数时候我都用 Windows 8.1 自带的复制，不过如果我真要搬运一大堆东西的话我会用 TeraCopy。正如其名它做的事情就是复制，而且在速度上，无出其右。</li>
<li><a href="http://nimbletext.com/" target="_blank" rel="external">NimbleText</a> - 正则表达式很难写，我也学不会。NumbleText 则可以让你轻松地处理大量文字。</li>
<li><a href="https://github.com/bmatzelle/gow" target="_blank" rel="external">GOW Gnu on Windows</a> - 当你只需要 *nix 工具的时候装 Cygwin 未免小题大做。 Gow 就是 130 个编译成原生 Windows EXE 的 Unix 命令行工具，仅此而已。</li>
<li><a href="http://justgetflux.com/" target="_blank" rel="external">F.lux</a> - 说实话，一开始我觉得这玩意挺蠢的，但是再用完几天之后我就收回了那些想法。F.lux 会随着每天时间的变化来调整显示器色温，在晚上就能让显示器色调更暖。对于一个整天对着三个巨屏的人来说这是福利。自从用来 F.lux 我再也不头痛了，眼酸的症状也缓解了很多。试试看，你会喜欢上的。</li>
<li><a href="http://www.autohotkey.com/" target="_blank" rel="external">AutoHotKey</a> - 这个开源小东西碉堡了。你可以吧复杂的工作变成简单的快捷键，非程序员的变成利器。它可以用极其简单的方法来自动化 Windows 操作，堪称 Windows 平台的 Applescript。<ul>
<li>别忘了<a href="http://www.autohotkey.com/forum/topic21703.html" target="_blank" rel="external">Window Pad</a> - 超赞的好东西，完全是用 AHK 写成的！</li>
</ul>
</li>
<li><a href="http://www.getpaint.net/index.html" target="_blank" rel="external">Paint.NET</a> - Windows 应该 内置 的画图程序，基于 .NET 平台，用免费的价格换取 Photoshop 80% 的能力。目前 Paint.NET 正在积极开发它的第四版！</li>
<li><a href="http://download.live.com/writer" target="_blank" rel="external">Windows Live Writer</a> - 如果你有博客，那它是胃液素神器。它还有一个不错的 插件库。它应该停止更新了，但生命力依旧旺盛。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[void to input username and password when using git]]></title>
      <url>http://catwarrior.github.io/2015/11/19/void-to-input-username-and-password-when-using-git/</url>
      <content type="html"><![CDATA[<p>using git bash.<br>vim ~/.get-credentials<br><code>https://myusername:mypassword@git.oschina.net</code></p>
<p><code>git config credential.https://git.oschina.net.username myusername [--global]</code><br><code>git config credential.helper store --file=~/.git-credentials [--global]</code></p>
<p><code>git config credential.helper store</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[how to fix file is open in another program on windows]]></title>
      <url>http://catwarrior.github.io/2015/11/19/how-to-fix-file-is-open-in-another-program-on-windows/</url>
      <content type="html"><![CDATA[<p>Why can’t I delete or move a file or folder?<br>What program is stopping me from deleting or moving a file or folder?<br>You really what to find the “Stupid guy” who is ocuppying the file?</p>
<p>Here you go! Boo.. There is an application called <code>Microsoft Process Explorer</code>.<br>Run it.<br>Go the menu bar of <code>Microsoft Process Explorer</code>.<br><code>Find</code> =&gt; <code>Here input the folder/file which you cannot delete.</code></p>
<p>It will show you which process ocupy it.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[how to know the install status for a msi installer]]></title>
      <url>http://catwarrior.github.io/2015/11/18/how-to-know-the-install-status-for-a-msi-installer/</url>
      <content type="html"><![CDATA[<p>Refer to <a href="http://stackoverflow.com/questions/320921/how-to-add-a-wix-custom-action-that-happens-only-on-uninstall-via-msi" target="_blank" rel="external">http://stackoverflow.com/questions/320921/how-to-add-a-wix-custom-action-that-happens-only-on-uninstall-via-msi</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Create a smart wcf client wrapper]]></title>
      <url>http://catwarrior.github.io/2015/11/12/create-a-wcf-client-wrapper/</url>
      <content type="html"><![CDATA[<h2 id="A_good_start_for_wcf_client_programing-">A good start for wcf client programing.</h2><p>In the last article we presented a solution for calling WCF services that needed only a single line of code and no using statements.  But it had many limitations including</p>
<ul>
<li>Reliance on a static class</li>
<li>Testability was low for any code using it</li>
<li>Reliance on the WCF client rather than the contract</li>
<li>Not optimized for multiple calls<br>In reality the previous series of articles where all about setting up the infrastructure to support the final solution.  All this infrastructure will be hidden from code when we are done.  Let’s get started.</li>
</ul>
<h2 id="Service_Template">Service Template</h2><p>Ultimately we will be using T4 to generate service clients but the templates are complex and we do not yet even have an idea of what we’re building.  For this article we will build the final service client by hand.  In subsequent articles we will convert the code to a template.</p>
<p>The service client should meet the following goals</p>
<ul>
<li>Creatable using a standard new operator with no requirements for specifying any WCF endpoint information.</li>
<li>Implement the WCF contract interface so instances can be used as parameters such as in an IoC.</li>
<li>Instances do not need to be disposed.</li>
<li>Should allow multiple calls to be optimized through the same client.</li>
<li>Extensible to allow callers to adjust the client if needed.</li>
</ul>
<h2 id="ServiceChannelClient">ServiceChannelClient</h2><p>To start we will create a new abstract class that will serve as the base class for service clients.  While we could reuse the ServiceClientWrapper of previous articles that would expose too much WCF infrastructure.  Instead the class will wrap calls to <code>ServiceClientWrapper</code> and <code>ServiceClientFactory</code> from the previous articles.  All the functionality is protected since this is an abstract class.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ServiceChannelClient&lt;TChannel&gt; where TChannel: class</span><br><span class="line">&#123;</span><br><span class="line">   protected virtual ServiceClientWrapper&lt;TChannel&gt; CreateInstance ()</span><br><span class="line">   &#123; return ServiceClientFactory.CreateAndWrap&lt;TChannel&gt;(); &#125;</span><br><span class="line"></span><br><span class="line">   protected virtual void InvokeMethod ( Action&lt;TChannel&gt; action )</span><br><span class="line">   &#123; ServiceClientFactory.InvokeMethod&lt;TChannel&gt;(action, CreateInstance); &#125;</span><br><span class="line"></span><br><span class="line">   protected virtual TResult InvokeMethod&lt;TResult&gt; ( Func&lt;TChannel, TResult&gt; action )</span><br><span class="line">   &#123; return ServiceClientFactory.InvokeMethod&lt;TChannel, TResult&gt;(action, CreateInstance); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Basically the class just wraps the classes from previous articles.  It is about to get more functionality but first let’s implement a WCF service client using the class.</p>
<h2 id="Typed_Service_Clients">Typed Service Clients</h2><p>Creating a class to wrap a WCF service is now pretty straightforward (depending upon the size of the interface).  We need only create a derived type and implement the interface using the methods provided in the base class.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class EmployeeServiceClient : ServiceChannelClient&lt;IEmployeeService&gt; , IEmployeeService</span><br><span class="line">&#123;</span><br><span class="line">   public Employee Get ( int id )</span><br><span class="line">   &#123; return InvokeMethod&lt;Employee&gt;(c =&gt; c.Get(id)); &#125;</span><br><span class="line"></span><br><span class="line">   public Employee Update ( Employee employee )</span><br><span class="line">   &#123; return InvokeMethod&lt;Employee&gt;(c =&gt; c.Update(employee)); &#125;  </span><br><span class="line"></span><br><span class="line">   public IEnumerable&lt;Employee&gt; GetEmployees ()</span><br><span class="line">   &#123; return InvokeMethod&lt;IEnumerable&lt;Employee&gt;&gt;(c =&gt; c.GetEmployees()); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>If we wanted we could make all the methods virtual to allow for extensibility.  We could also mark the type as partial to extend its abilities but the above code is sufficient until we move to T4.</p>
<p>Switching the application over to use the new client is straightforward.</p>
<ul>
<li>Remove the service reference code</li>
<li>Add the service interface assembly to the project</li>
<li>Replace all the existing calls with the new type<br>When the service reference code is removed it will remove the configuration entry for the service as well so that information will need to be put back in.  For now ensure the endpoint name matches the class name and that the contract name matches the namespace name of the interface.</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">!—-</span> <span class="attribute">Original</span> <span class="attribute">-</span>–&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">client</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">endpoint</span> <span class="attribute">address</span>=<span class="value">"http://localhost:21054/EmployeeService.svc"</span></span><br><span class="line">                 <span class="attribute">binding</span>=<span class="value">"basicHttpBinding"</span></span><br><span class="line">                 <span class="attribute">bindingConfiguration</span>=<span class="value">"BasicHttpBinding_IEmployeeService"</span></span><br><span class="line">                 <span class="attribute">contract</span>=<span class="value">"ServiceReference1.IEmployeeService"</span></span><br><span class="line">                 <span class="attribute">name</span>=<span class="value">"BasicHttpBinding_IEmployeeService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">client</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">!—-</span> <span class="attribute">New</span> <span class="attribute">-</span>–&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">client</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">endpoint</span> <span class="attribute">address</span>=<span class="value">"http://localhost:21054/EmployeeService.svc"</span></span><br><span class="line">                 <span class="attribute">binding</span>=<span class="value">"basicHttpBinding"</span></span><br><span class="line">                 <span class="attribute">bindingConfiguration</span>=<span class="value">"BasicHttpBinding_IEmployeeService"</span></span><br><span class="line">                 <span class="attribute">contract</span>=<span class="value">"ServiceLib.IEmployeeService"</span></span><br><span class="line">                 <span class="attribute">name</span>=<span class="value">"EmployeeServiceClient"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">client</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The matching of the endpoint name with the client type name is only a convenience.  We can add a constructor that allows the endpoint name to be specified if we want.  Finally we can fix up the calls to the client.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Original</span></span><br><span class="line">ServiceClientFactory.InvokeMethod&lt;ServiceReference1.IEmployeeService&gt;(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">   dataGridView1.DataSource = c.GetEmployees();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//New</span></span><br><span class="line">dataGridView1.DataSource = Client.GetEmployees();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Poor man's injection</span></span><br><span class="line"><span class="keyword">private</span> IEmployeeService Client</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> m_client.Value; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Lazy&lt;IEmployeeService&gt; m_client = <span class="keyword">new</span> Lazy&lt;IEmployeeService&gt;(() =&gt; <span class="keyword">new</span> EmployeeServiceClient());</span><br></pre></td></tr></table></figure>
<p>Now that we don’t need to dispose of objects or rely on static classes we can use just the interface which makes testing much easier.</p>
<h2 id="Multiple_Calls">Multiple Calls</h2><p>We’re almost done but we want to make one more change.  WCF service calls are not cheap so most calls tend to do several things at once rather than focusing on a single task like standard OOP would have you do.  But there are times when multiple calls are needed and the above code would require 2 client connections to be created.  Take, for example, this code in the sample application that creates 2 connections just to update an employee.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnNewEmployee</span> (<span class="params"> <span class="keyword">object</span> sender, EventArgs e </span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> dlg = <span class="keyword">new</span> EmployeeForm();  </span><br><span class="line">   <span class="keyword">if</span> (dlg.ShowDialog(<span class="keyword">this</span>) != DialogResult.OK)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Call the service</span></span><br><span class="line">   Client.Update(dlg.Employee);</span><br><span class="line">   LoadEmployees();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadEmployees</span> (<span class="params"> </span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">   dataGridView1.DataSource = Client.GetEmployees();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What we want to do is allow the client to tell us they plan to make multiple calls so we can optimize the client creation.  Since the client needs to be able to define the lifetime of the calls it makes sense to use a using statement.  All we need to do is provide a mechanism for creating a type that controls the lifetime of our client.  We can add this directly to the base client.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ServiceChannelClient&lt;TChannel&gt; :</span><br><span class="line">     ISupportsPersistentChannel where TChannel: class</span><br><span class="line">&#123;</span><br><span class="line">   protected bool HasOpenChannel</span><br><span class="line">   &#123;</span><br><span class="line">      get &#123; return m_channel != null; &#125;</span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   protected virtual void CloseChannel ()</span><br><span class="line">   &#123;</span><br><span class="line">      var channel = Interlocked.Exchange(ref m_channel, null);</span><br><span class="line"></span><br><span class="line">      if (channel != null)  </span><br><span class="line">          channel.Close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   protected virtual ServiceClientWrapper&lt;TChannel&gt; CreateInstance ()</span><br><span class="line">   &#123; return ServiceClientFactory.CreateAndWrap&lt;TChannel&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now the base class can have a temporary or permanent connection open depending upon the caller’s needs.  But how do we expose this to the caller?  Introducing the <code>ISupportsPersistentChannel</code> interface.  The sole purpose of this interface is to expose Open/Close methods.  Notice the methods are not exposed publicly but only through the interface.  This prevents callers from calling these methods accidentally.  Why is this important?  Why do we need an interface?  It’s all about interchangeability.</p>
<h2 id="Creating_A_Persistent_Channel">Creating A Persistent Channel</h2><p>Remember that one of the requirements is that we want to be able to use the service interface directly without regards to the implementation, including mocks.  Therefore persistence cannot require that we use the client class.  Instead we add an extension to the interface which gives us the ability to open a persisted channel irrelevant of the implementation.  The caller code will work the same whether we’re using our client type or a test mock.  Here’s the implementation.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">EmployeeServiceExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IDisposable <span class="title">OpenPersistentChannel</span> (<span class="params"> <span class="keyword">this</span> IEmployeeService source </span>)</span><br><span class="line">   </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> batch = source <span class="keyword">as</span> ISupportsPersistentChannel;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (batch != <span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         batch.Open();  </span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ActionDisposable(batch.Close);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Disposable.Empty;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The key is that the extension method will look for the <code>ISupportsPersistentChannel</code> interface.  For types deriving from <code>ServiceChannelClient</code> the interface will exist.  For other types it likely will not.  If the interface does exist then the channel is opened and an instance of a disposable class is returned that will close the channel.  Note the client itself is never returned.  If the interface does not exist then a disposable object is returned that does nothing.  This makes it safe for both production and test code.  Here’s how the caller would use it.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnNewEmployee</span> (<span class="params"> <span class="keyword">object</span> sender, EventArgs e </span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> dlg = <span class="keyword">new</span> EmployeeForm();</span><br><span class="line">   <span class="keyword">if</span> (dlg.ShowDialog(<span class="keyword">this</span>) != DialogResult.OK)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Call the service</span></span><br><span class="line">   <span class="keyword">using</span> (<span class="keyword">var</span> proxy = Client.OpenPersistentChannel())   </span><br><span class="line">   &#123;</span><br><span class="line">      Client.Update(dlg.Employee);</span><br><span class="line">      LoadEmployees(Client);  </span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadEmployees</span> (<span class="params"> </span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">   LoadEmployees(Client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadEmployees</span> (<span class="params"> IEmployeeService service </span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">   dataGridView1.DataSource = service.GetEmployees();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Next_Steps">Next Steps</h2><p>We are finally at the point where we have replaced the original service reference logic with a fully testable client that eliminates the dependency on WCF plumbing.  The resultant code is clean and can be mocked.  In the general case of single calls to WCF then the caller does not need to anything special.  For multiple calls the client (can) optimize performance with a <code>using</code> statement and it won’t break any test implementations.  The only issue remaining is the amount of code we’d need to generate for each WCF service.  The example client we created can be converted to a T4 template but it is going to require quite a bit of work.  However once we’re done we won’t have to revisit this code ever again.  We’ll pick up T4 next time.</p>
<p>Original from :<br><a href="http://blogs.msmvps.com/p3net/2014/03/15/a-smarter-wcf-service-client-part-4/" target="_blank" rel="external">http://blogs.msmvps.com/p3net/2014/03/15/a-smarter-wcf-service-client-part-4/</a><br><a href="http://blogs.msmvps.com/p3net/2014/05/18/a-smarter-wcf-service-client-part-5/" target="_blank" rel="external">http://blogs.msmvps.com/p3net/2014/05/18/a-smarter-wcf-service-client-part-5/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WMI Query]]></title>
      <url>http://catwarrior.github.io/2015/11/11/wmi-query/</url>
      <content type="html"><![CDATA[<p>The following WMI queries can be used as inspiration when working with driveres and other OS Deployment stuff…<br>IMPORTANT: If you copy/paste these queries, you might need to replace the quotes, as they often change format when you copy them from a website</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[upgrade npm on windows]]></title>
      <url>http://catwarrior.github.io/2015/11/05/upgrade-npm-on-windows/</url>
      <content type="html"><![CDATA[<p>Powershell Run as Administrator<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Unrestricted -Scope CurrentUser -Force</span><br></pre></td></tr></table></figure></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-windows-upgrade</span><br><span class="line">npm-windows-upgrade</span><br></pre></td></tr></table></figure>
<p>or Want to upgrade to specific version?</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm-windows-upgrade --version:<span class="number">3.1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.npmjs.com/package/npm-windows-upgrade" target="_blank" rel="external">Reference from npmjs.</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to change console back color on windows?]]></title>
      <url>http://catwarrior.github.io/2015/11/05/change-console-back-color-on-windows/</url>
      <content type="html"><![CDATA[<h2 id="Samples">Samples</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@rem Is black and white</span></span><br><span class="line"><span class="built_in">Color</span> <span class="number">0</span>F</span><br></pre></td></tr></table></figure>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@rem Is black and green</span></span><br><span class="line"><span class="built_in">Color</span> <span class="number">0</span>A</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git-tips-for-daily-work]]></title>
      <url>http://catwarrior.github.io/2015/10/30/git-tips-for-daily-work/</url>
      <content type="html"><![CDATA[<h2 id="Realize_you_forgot_to_add_the_changes_from_xxx-ext">Realize you forgot to add the changes from xxx.ext</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add xxx.ext&#10;git commit --amend --no-edit</span><br></pre></td></tr></table></figure>
<h2 id="The_difference_between_git_reset_and_git_revert">The difference between git reset and git revert</h2><p>git revert 是撤销某次操作，此次操作之前的commit都会被保留<br>git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区<br>具体一个例子，假设有三个commit， git st:<br>commit3: add test3.c<br>commit2: add test2.c<br>commit1: add test1.c<br>当执行git revert HEAD~1时， commit2被撤销了<br>git log可以看到：<br>commit1：add test1.c<br>commit3：add test3.c<br>git status 没有任何变化<br>如果换做执行git reset –soft(默认) HEAD~1后，运行git log<br>commit2: add test2.c<br>commit1: add test1.c<br>运行git status， 则test3.c处于暂存区，准备提交。<br>如果换做执行git reset –hard HEAD~1后，<br>显示：HEAD is now at commit2，运行git log<br>commit2: add test2.c<br>commit1: add test1.c<br>运行git st， 没有任何变化<br>另外：<br>git revert <commit log="" string="">是撤消该commit，作为一个新的commit。</commit></p>
<h2 id="Change_bash_indicator-">Change bash indicator.</h2><p>go to git install dir.<br>ex: C:\Program Files\Git\etc<br>open bash.bashrc<br>find PS1 section.<br>it should be something like<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set a default prompt of: user@host, MSYSTEM variable, and current_directory</span></span><br><span class="line"><span class="comment">#PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[35m\]$MSYSTEM\[\e[0m\] \[\e[33m\]\w\[\e[0m\]\n \e[33m\]&gt;&gt;\e[0m\] '</span></span><br></pre></td></tr></table></figure></p>
<h2 id="force_push_(will_sync_remote_by_local)">force push (will sync remote by local)</h2><p>helps if you push something by mistake.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:master `--force`</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Keep learning]]></title>
      <url>http://catwarrior.github.io/2015/10/30/reading/</url>
      <content type="html"><![CDATA[<blockquote><p>“Optimising your notation to not confuse people in the first 10 minutes of seeing it but to hinder readability ever after is a really bad mistake.”</p>
<footer><strong>David MacIver - </strong><cite><a href="http://rickyclarkson.blogspot.co.uk/2008/01/in-defence-of-0l-in-scala.html" target="_blank" rel="external">a post about Scala syntax</a></cite></footer></blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Share source file in .Net]]></title>
      <url>http://catwarrior.github.io/2015/10/27/share-source-file-in-net/</url>
      <content type="html"><![CDATA[<figure class="highlight"><figcaption><span>#</span><a href="http://stackoverflow.com/questions/1116465/how-do-you-share-code-between-projects-solutions-in-visual-studio" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Compile Include="..\MySisterProject\**\*.cs"&gt;</span><br><span class="line">  &lt;Link&gt;_Inlined\MySisterProject\%(RecursiveDir)%(Filename)%(Extension)&lt;/Link&gt;</span><br><span class="line">  &lt;Visible&gt;false&lt;/Visible&gt;</span><br><span class="line">&lt;/Compile&gt;</span><br></pre></td></tr></table></figure>
<h2 id="linq_samples">linq samples</h2><p><a href="http://blog.csdn.net/smartsmile2012/article/details/44873251" target="_blank" rel="external">101 linq sample</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Useful links]]></title>
      <url>http://catwarrior.github.io/2015/10/24/link-share/</url>
      <content type="html"><![CDATA[<h1 id="Just_hold_a_place_to_put_links_I_collect_before-">Just hold a place to put links I collect before.</h1><h2 id="MS">MS</h2><p><a href="http://weblogs.asp.net/scottgu" target="_blank" rel="external">ScottGu’s Blog</a><br><a href="http://fsharpforfunandprofit.com/" target="_blank" rel="external">F# for fun</a><br><a href="http://fsharp.org/about/learning.html" target="_blank" rel="external">F# offical</a><br><a href="https://msdn.microsoft.com/en-us/library/ms973920.aspx" target="_blank" rel="external">Structuring a .NET Application For Easy Deployment</a><br><a href="http://www.dotnetfoundation.org/projects" target="_blank" rel="external">MS Open Source</a><br><a href="http://dotnet.github.io/" target="_blank" rel="external">.net core</a><br><a href="https://github.com/catwarrior/awesome-dotnet" target="_blank" rel="external">Awesome .NET</a></p>
<h2 id="Tools">Tools</h2><p><a href="http://chocolatey.org/" target="_blank" rel="external">Chocolatey NuGet is a Machine Package Manager</a></p>
<h2 id="Javascript">Javascript</h2><p><a href="http://todomvc.com/" target="_blank" rel="external">Helping you select an MV* framework</a></p>
<h2 id="CPP">CPP</h2><p><a href="http://cs.fit.edu/~mmahoney/cse2050/how2cpp.html" target="_blank" rel="external">How to Program in C++</a><br><a href="http://cs.fit.edu/~mmahoney/cse1502/introcpp.html" target="_blank" rel="external">Introduce C++</a></p>
<h2 id="Happy_internet">Happy internet</h2><p><a href="https://portal.shadowsocks.com" target="_blank" rel="external">shadowsocks</a><br><a href="https://cokebar.info/archives/664" target="_blank" rel="external">Shadowsocks + ChnRoute OpenWRT</a></p>
<h2 id="Githubs">Githubs</h2><p><a href="https://github.com/google" target="_blank" rel="external">Google developers</a></p>
<h2 id="Build">Build</h2><p><code>Fake</code> <code>Cake</code></p>
<h2 id="Install">Install</h2><p><a href="https://github.com/catwarrior/Squirrel.Windows" target="_blank" rel="external">Squirrel.Windows</a><br><a href="https://github.com/oleg-shilo/wixsharp" target="_blank" rel="external">Wix#</a></p>
<h3 id="blogs">blogs</h3><p><a href="http://www.cnblogs.com/yaozhenfa/p/functional_cache.html" target="_blank" rel="external">yaozhenfa-cnblogs</a></p>
<h3 id="wintellect_jeffreyr">wintellect jeffreyr</h3><p><a href="http://www.wintellect.com/devcenter/jeffreyr" target="_blank" rel="external">jeffreyr</a></p>
<h3 id="廖雪峰_several_programming_language_tutorial">廖雪峰 several programming language tutorial</h3><p><a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">liaoxuefeng</a></p>
<h3 id="张占岭_ddd_-net">张占岭 ddd .net</h3><p><a href="http://www.cnblogs.com/lori/p/3413730.html" target="_blank" rel="external">Zhangzhanlin</a></p>
<p><a href="http://www.cnblogs.com/Darren_code/p/atom.html" target="_blank" rel="external">Using Atom - Introduction</a></p>
<h3 id="Neal_Ford">Neal Ford</h3><p><a href="http://nealford.com/bio.html" target="_blank" rel="external">Neal Ford - a great software architecture</a></p>
<h3 id="淘宝UED官方博客">淘宝UED官方博客</h3><p><a href="http://ued.taobao.org/blog/2012/07/getting-started-with-markdown/" target="_blank" rel="external">taobao UED blog</a></p>
<h2 id="Something_may_check_later">Something may check later</h2><p><a href="https://segmentfault.com/q/1010000002404545" target="_blank" rel="external">GitHub上整理的一些工具</a><br><a href="http://coolshell.cn/articles/1566.html" target="_blank" rel="external">Cheat sheets</a><br><a href="http://www.zhihu.com/question/20772002" target="_blank" rel="external">那些被称为神器的工具</a><br><a href="https://getcomposer.org" target="_blank" rel="external">Package manager for PHP</a></p>
<h3 id="azure_stuff">azure stuff</h3><p><a href="http://www.softwareqatest.com/qatweb1.html" target="_blank" rel="external">Web Site Test Tools and Site Management Tools- More than 540 tools listed in 14 categories</a><br><a href="http://microsoftazurewebsitescheatsheet.info/" target="_blank" rel="external">Azure cheat sheets</a><br><a href="http://www.rhizohm.net/irhetoric/post/2015/11/06/Using-NLog-For-Diagnostic-Logging-In-Windows-Azure-Cloud-Services-And-Writing-The-Logs-To-Azure-Table-Storage.aspx" target="_blank" rel="external">Using NLog For Diagnostic Logging In Windows Azure Cloud Services And Writing The Logs To Azure Table Storage</a></p>
<h1 id="My_tool_box">My tool box</h1><h2 id="environment">environment</h2><p>chocolatey<br>git<br>nodejs<br>ruby<br>python<br>linqpad<br>docker</p>
<h3 id="docker_container">docker container</h3><p><a href="https://github.com/tutumcloud" target="_blank" rel="external">tutumcloud</a><br><a href="http://blog.tutum.co/" target="_blank" rel="external">tutum blog</a><br><a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">docker csdn</a></p>
<h2 id="langs">langs</h2><p><a href="https://github.com/scriptcs" target="_blank" rel="external">scriptcs</a> - Write C# apps with a text editor, nuget and the power of Roslyn! <a href="http://scriptcs.net" target="_blank" rel="external">http://scriptcs.net</a></p>
<h2 id="Build-1">Build</h2><p><a href="http://www.ilker.de/fake-everywhere.html" target="_blank" rel="external">FAKE - F# Make</a><br><a href="https://github.com/psake/psake" target="_blank" rel="external">PSake</a></p>
<h2 id="editors">editors</h2><p><a href="https://maxiang.io/" target="_blank" rel="external">maxiang markdown - flowchart and formula support</a></p>
<h2 id="library_doc_tools">library doc tools</h2><p><a href="https://zealdocs.org/" target="_blank" rel="external">zeal</a><br><code>dash</code> on mac osx</p>
<h2 id="open_library">open library</h2><p>cecil - Modify .NET binaries</p>
<h2 id="automation">automation</h2><p><a href="https://github.com/stirno/FluentAutomation" target="_blank" rel="external">FluentAutomation</a> - Simple Fluent API for UI Automation <a href="http://fluent.stirno.com" target="_blank" rel="external">http://fluent.stirno.com</a></p>
<h2 id="Web_performance">Web performance</h2><h3 id="tools">tools</h3><p>wrk<br>go-wrk<br>ab(ApacheBench)</p>
<h3 id="serialize_libraries">serialize libraries</h3><p>protobuf<br>jil<br>stackservice</p>
<h3 id="about_performance">about performance</h3><p>关于性能测试的分类，可以举一个比较通俗的例子方便大家理解：<br>假设一个人很轻松就能背1袋米，背2袋米很吃力，最多就能背3袋米<br>稳定性测试-我让他背1袋米，但是让他去操场上跑圈，看多久累倒。<br>负载测试-我让他背2袋米去操场上跑圈，看多久累倒。<br>压力测试-我让他背2袋米，3袋米，4袋米…发现他最多就能背3袋</p>
<h2 id="Asp-net_Web_API">Asp.net Web API</h2><p><a href="http://bitoftech.net/2013/11/25/building-database-model-entityframework-code-first" target="_blank" rel="external">Building ASP.Net Web API RESTful Service</a></p>
<h2 id="Ioc_container_/_libraries">Ioc container / libraries</h2><p><a href="https://github.com/simpleinjector/SimpleInjector" target="_blank" rel="external">SimpleInjector</a><br><a href="https://github.com/castleproject" target="_blank" rel="external">Castle</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gossip]]></title>
      <url>http://catwarrior.github.io/2015/10/23/Gossip/</url>
      <content type="html"><![CDATA[<p>Today, I’m trying to move all my personal stuff to a new blog, which created via HEXO, host on github.<br>Basically, I want to keep my daily things to a fix place, as people says, learn from the past.<br>Then I meet a kid, a young programer, all of sudden, I feel I have a lot things to learn, there is a lot space to move on.</p>
<p>Here just do a mark, warn myself.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Write Simple Code]]></title>
      <url>http://catwarrior.github.io/2015/10/22/First-Post/</url>
      <content type="html"><![CDATA[<ul>
<li>Only one indentation level per method</li>
<li>Do not use else</li>
<li>Wrap primitive types, if they contain behavior</li>
<li>Only one per line</li>
<li>Do not abbreviate</li>
<li>Keep your classes small</li>
<li>Limit your instance variables to less then 5</li>
<li>Use ﬁrst class collections</li>
<li>Use getters and setters</li>
<li>Document your code</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://catwarrior.github.io/2015/10/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
